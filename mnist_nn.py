# -*- coding: utf-8 -*-
"""MNIST NN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L62g8Dpfig4FJ4x10_U-XsPz8Gm8VnuI

**Pasiruošimas**

- Importuojamos programinės įrangos bibliotekos
- duomenų bazės paruošimas: nustatomas testojamas ir mokinamas duomenų bazės dalis, vaizdų vertimas į vektorius, klasių vektoriai konvertuojami į dvejetaines klasių matricas
"""

import keras
from keras.datasets import mnist
from keras.layers import Dense
from keras.models import Sequential
from matplotlib import pyplot as plt
from random import randint

(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train_drawing = x_train

image_size = 784 
x_train = x_train.reshape(x_train.shape[0], image_size) 
x_test = x_test.reshape(x_test.shape[0], image_size)

num_classes = 10
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

"""Peržvelgiami atsotiktinai parinkti skaitmenys iš treniruojančio rinkinio


"""

for i in range(64):
    ax = plt.subplot(8, 8, i+1)
    ax.axis('off')
    plt.imshow(x_train_drawing[randint(0, x_train.shape[0])], cmap='Greys')

"""Kuriamas modelis. Jis turi vieną paslėptąjį sluoksnį su 32 mazgais."""

model = Sequential()

model.add(Dense(units=32, activation='sigmoid', input_shape=(image_size,)))
model.add(Dense(units=num_classes, activation='softmax'))
model.summary()

"""Tinko įvertinimas ir apmokymas

"""

model.compile(optimizer="sgd", loss='categorical_crossentropy', metrics=['accuracy'])
history = model.fit(x_train, y_train, batch_size=128, epochs=5, verbose=False, validation_split=.1)
loss, accuracy  = model.evaluate(x_test, y_test, verbose=False)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['training', 'validation'], loc='best')
plt.show()

print(f'Test loss: {loss:.3}')
print(f'Test accuracy: {accuracy:.3}')